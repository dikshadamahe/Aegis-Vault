// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// NextAuth + Application models adapted for MongoDB
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  name                String?    @unique
  email               String?    @unique
  emailVerified       DateTime?
  hashedPassword      String?
  encryptionSalt      String?
  image               String?
  encryptionPublicKey String?
  accounts            Account[]
  sessions            Session[]
  categories          Category[]
  passwords           Password[]

  @@index([name, email])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  name      String
  slug      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwords Password[]

  @@unique([userId, slug])
  @@index([userId])
  @@index([name])
}

model Password {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  categoryId         String    @db.ObjectId

  // Display fields
  websiteName        String
  email              String?
  username           String?
  url                String?

  // Client-side encryption fields
  passwordCiphertext   String?
  passwordNonce        String?
  passwordEncryptedDek String?
  passwordDekNonce     String?
  notesCiphertext      String?
  notesNonce           String?
  notesEncryptedDek    String?
  notesDekNonce        String?

  lastUsedAt         DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category           Category  @relation(fields: [categoryId], references: [id])

  // Legacy fields retained for backwards compatibility
  password           String?   @default("")
  passwordSalt       String?

  @@index([userId])
  @@index([categoryId])
  @@index([websiteName])
  @@index([userId, updatedAt])
}