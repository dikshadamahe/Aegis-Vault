// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// Switch to MongoDB provider as requested
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// NextAuth + Application models adapted for MongoDB
model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  name               String?    @unique
  email              String?    @unique
  emailVerified      DateTime?
  hashedPassword     String?
  // Per-user salt for deriving encryption keys; base64 string
  encryptionSalt     String?
  image              String?
  encryptionPublicKey String? // reserved for future sharing features
  accounts           Account[]
  sessions           Session[]
  categories         Category[]
  passwords          Password[]

  @@index([name, email])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwords Password[]

  @@index([name, slug])
}

model Password {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  categoryId  String   @db.ObjectId
  // legacy display fields
  websiteName String
  email       String?
  username    String?
  url         String?
  // legacy plaintext-encrypted field (will be deprecated in favor of ciphertext fields)
  password    String
  // client-side encryption fields (ciphertext only)
  passwordCiphertext String?
  passwordNonce      String?
  passwordSalt       String?
  notesCiphertext    String?
  notesNonce         String?
  lastUsedAt         DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@index([websiteName])
}
